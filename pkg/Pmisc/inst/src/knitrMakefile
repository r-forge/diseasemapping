ifndef pandocTo
pandocTo = latex
endif

REXE = R
PANDOC = pandoc
XELATEX = xelatex
BIBER = biber
RM = rm
PANDOCCROSSREF =

DOCXTEMPLATE = $(REXE) --slave -e "cat(system.file('src','template.docx',package='Pmisc'))"

ODTTEMPLATE = $(REXE) --slave -e "cat(system.file('src','template.odt',package='Pmisc'))"

.PRECIOUS: %.tex

#
# temporary files to remove
#
clean:
	$(RM) *.run.xml* *.blg *.out *.log *.aux *.nav *.toc *.vrb
	
#
# tmd file is markdown only to be converted to latex, 
# include
# if(any(commandArgs()=='mdToTex')) {
#   knitr::knit_hooks$set(plot=knitr::hook_plot_tex)  
#   mdToTex=TRUE
# } else {
#   knitr::knit_hooks$set(plot=Pmisc::hook_plot_htmlsubfig)
#   mdToTex=FALSE
# }
# specify files for tex from tmd directly 
# so as not to conflict with %.tex: %.md rule
#

# md to tex, convert from a tmd if it exists
# get rid of subfig package, it conflicts with subcaption (or something else)
%.tex: %.tmd
	$(PANDOC) --standalone --smart --filter=pandoc-crossref --biblatex $(pandocArgs) --from=markdown --to=$(pandocTo) $< | sed s/\\\\usepackage{subfig}// > $@

%.tex: %.md
	$(PANDOC) --standalone --smart $(PANDOCCROSSREF) --biblatex $(pandocArgs) --from=markdown --to=$(pandocTo) --output=$@ $<

#
# Create tmd
#
%.tmd: %.Rmd
	$(REXE) -e "knitr::knit('$<', output = '$@', encoding='UTF-8')"  mdToTex $(Rargs)

#
# Bog standard markdown
#
%.md: %.Rmd
	$(REXE) -e "knitr::knit('$<', encoding='UTF-8')" $(Rargs)

#
# tex bibliography
#
%.bbl: %.bcf
	$(BIBER) $<	

%.bcf: %.tex
	$(XELATEX) -interaction=nonstopmode $<

#
# pdf from tex
# 
%.pdf: %.tex %.bbl
	$(XELATEX) -interaction=nonstopmode $<;
	$(XELATEX) -interaction=nonstopmode $<
#
# html from md
#
%.html: %.md
	$(PANDOC) --smart --self-contained --mathjax $(PANDOCCROSSREF) --filter=pandoc-citeproc $(pandocArgs) --to=html5 --output=$@ $<

# 
# libreoffice document
#
%.odt: %.md
	$(PANDOC) --smart --standalone $(PANDOCCROSSREF) --filter=pandoc-citeproc $(pandocArgs) --reference-docx=$$($(ODTTEMPLATE)) --output=$@ $<

#
# MS Word document
#
%.docx: %.md
	$(PANDOC) --smart --standalone $(PANDOCCROSSREF) --filter=pandoc-citeproc $(pandocArgs) --reference-docx=$$($(DOCXTEMPLATE)) --output=$@ $<

# 
# rtf
# 
%.rtf: %.md
	$(PANDOC) --smart --standalone --filter=pandoc-crossref --filter=pandoc-citeproc $(pandocArgs) --output=$@ $<

