\documentclass[12pt]{article}

%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Log-Gaussian Cox Processes}

\usepackage[margin=1in]{geometry}
\usepackage{graphicx,hyperref}

\usepackage{caption,subcaption,float}
\newcommand{\subfloat}[2][need a sub-caption]{\subcaptionbox{#1}{#2}}


\title{Log-Gaussian Cox Processes}
\author{Patrick Brown}


\begin{document}
\maketitle 


<<setup,include=FALSE,cache=FALSE>>=
library('knitr')
theArgs = c("",commandArgs(trailingOnly=TRUE))
theArgs = theArgs[!is.na(theArgs)]
reRun = any(theArgs=="reRun")

reSave = any(theArgs=="reSave")
smallMemory = any(theArgs=="smallMemory")

opts_chunk$set(echo=TRUE,message=FALSE,
		dev='png', 
		fig.align='center',fig.pos='H',
		fig.height=3,fig.width=5,out.width="0.45\\textwidth",
		tidy=TRUE,
		tidy.opts=list(keep.blank.line=FALSE, width.cutoff=60)
)



par(bg="white")

library('rgdal')
@




\section{Simulate data}
Toronto murder data
<<toronto>>=
library("geostatsp")
data("murder")
torontoNight
@

<<rotateToronto,include=FALSE>>=
rotatedCRS = CRS("+proj=omerc +lat_0=43.69762
 +lonc=-79.38751 +alpha=-18.0000000 +gamma=0.0
 +k=1.000000 +x_0=500000.000 +y_0=0.000
 +ellps=WGS84 +units=m")
library("rgdal")
torontoBorderR = spTransform(torontoBorder, rotatedCRS)
torontoNightR = projectRaster(torontoNight, crs=rotatedCRS)
torontoNightR = mask(torontoNightR, torontoBorderR)
@

<<torontoTiles>>=
library("mapmisc") 
torontoTiles = openmap(torontoBorder)
torontoTilesR = openmap(torontoBorderR)
@

<<plotToronto,fig.cap='Toronto ambient light', fig.subcap=c("UTM","rotated")>>=
library('mapmisc')
map.new(torontoBorder)
plot(torontoTiles,add=TRUE)
plot(torontoNight,add=TRUE,alpha=0.8,col=heat.colors(10))
plot(torontoBorder,add=TRUE)

map.new(torontoBorderR)
plot(torontoTilesR,add=TRUE)
plot(torontoNightR,add=TRUE,alpha=0.8,col=heat.colors(10))
plot(torontoBorderR,add=TRUE)


@

Raster to simulate the intensity on
<<Ncol,include=FALSE>>=
if(smallMemory) {
	Ncol = 50
} else {
	Ncol = 200
}
@
<<rasterForSim>>=
Ncol
myraster = raster(extent(torontoBorderR), crs=projection(torontoBorderR),
		ncol=Ncol)
myraster = squareRaster(myraster)

@

Parameters.  Intensity is in number of cases per $m^2$.
<<params>>=
casesPerSqK = 0.1
mymodel = c(mean=log(casesPerSqK)+log(1e-6), variance=1^2, 
		range=20000, shape=2)
@

<<dataForSim>>=
if(reRun)
	myLgcp=simLgcp(mymodel, torontoNightR, betas=c(layer=0.01), 
		rasterTemplate=myraster)
@

<<loadSimData,include=FALSE>>=
if(!reRun) {
	load(system.file("extdata", "fit.RData", package = "geostatsinla"))
}
@


<<simres>>=
names(myLgcp)
length(myLgcp$events)
@

\section{INLA}

<<NcolInla,include=FALSE>>=
if(smallMemory) {
	Ncol = 25
} else {
	Ncol = 50
}
@

<<inla>>=
library('geostatsinla')
if(reRun) {
fit = lgcp(myLgcp$events, cells=Ncol,
		covariates=torontoNightR,
		formula = ~layer, shape=2, buffer=1000,
		priorCI = list(sd = c(0.1, 4), range = c(2000, 50000)))
} else {
	fit=list()
}
@

<<loadsystemresults,echo=FALSE>>=
if(is.null(fit$raster)) {
	resfile <- system.file("extdata", "fit.RData", package = "geostatsinla")
	load(resfile)
}
@


<<saveSystemFile,echo=FALSE>>=
# if a new version of fit.RData has been built
if(reSave & file.exists("../inst/extdata"))
	save(myLgcp, fit, file="../inst/extdata/fit.RData",compress="xz")
@


<<inlaRes,results='asis',echo=FALSE>>=
library('xtable')
xtable(fit$par$summary[,c("mean","0.025quant","0.975quant")],
		caption='INLA parameter estimates',  
		dec=3)
@
<<inlaResPlot,fig.cap="Intensity surfaces",fig.subcap=c("intensity true","intensity posterior mean", "rand eff true","rand eff posterior mean"),out.width="0.45\\textwidth",echo=FALSE,message=FALSE>>=
mycol = rev(heat.colors(100))
map.new(torontoBorderR,legendRight=TRUE)
plot(torontoTilesR,add=TRUE)
plot(myLgcp$raster[['intensity']],add=TRUE,alpha=0.8,col=mycol)
points(myLgcp$events, col='#00000060',cex=0.25)
plot(torontoBorder,add=TRUE)


map.new(torontoBorderR,legendRight=TRUE)
plot(torontoTilesR,add=TRUE)
plot(fit$raster[['predict.exp']],add=TRUE,alpha=0.8,col=mycol)
plot(torontoBorder,add=TRUE)

map.new(torontoBorderR,legendRight=TRUE)
plot(torontoTilesR,add=TRUE)
plot(myLgcp$raster[['random']],add=TRUE,alpha=0.6,col=mycol)
plot(torontoBorder,add=TRUE)


map.new(torontoBorderR,legendRight=TRUE)
plot(torontoTilesR,add=TRUE)
plot(raster::mask(
				fit$raster[['random.mean']],
				torontoBorderR),
				add=TRUE,alpha=0.6,col=mycol)
plot(torontoBorder,add=TRUE)
@


<<inlaPostr,fig.cap='parameter distributions',fig.subcap=c('range','sd','night'),out.width='0.3\\textwidth',fig.height=4,fig.width=5,echo=FALSE>>=


# range
plot(fit$parameters$range$post,col='red', type='l', xlim=c(0, 30*1000),
		xlab='range', ylab='density')
lines(fit$parameters$range$prior,type='l', col='blue')
legend("topright", col=c("blue","red","black"),lty=1,legend=c("prior","post'r","true"))
abline(v=myLgcp$par$random["range"])

# sd
plot(fit$parameters$sd$post,col='red',type='l', xlim=c(0,5),
		xlab='sd', ylab='density')
lines(fit$parameters$sd$prior,type='l', col='blue')
legend("topright", col=c("blue","red"),lty=1,legend=c("prior","post'r"))
abline(v=sqrt(myLgcp$par$random["variance"]))


plot(fit$inla$marginals.fixed$layer,type='l', col='red',
		xlab='beta', ylab='density')
abline(v=myLgcp$par$fixed["layer"])
@

\section{Technical}
This knitr script was built with the following options which 
<<technicals,echo=TRUE,eval=TRUE,cache=FALSE>>=
c(reRun,
reSave,
smallMemory)
any(installed.packages()=="INLA")
@
If this last expression is FALSE, results were loaded with
<<loadCode,echo=TRUE,eval=FALSE>>=
load(system.file("extdata", "fit.RData", package = "geostatsinla"))
@
The tex file was built with :

{\tt
<<cArgs,echo=FALSE,results='asis'>>=
cat(commandArgs())
@

}
Complete software information:
<<sessionInfo,echo=TRUE>>=
print(sessionInfo(),locale=FALSE)
@

\end{document}