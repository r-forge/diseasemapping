// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// initContexts
void initContexts();
RcppExport SEXP _gpuRbarebones_initContexts() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    initContexts();
    return R_NilValue;
END_RCPP
}
// listContexts
DataFrame listContexts();
RcppExport SEXP _gpuRbarebones_listContexts() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(listContexts());
    return rcpp_result_gen;
END_RCPP
}
// currentContext
int currentContext();
RcppExport SEXP _gpuRbarebones_currentContext() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(currentContext());
    return rcpp_result_gen;
END_RCPP
}
// cpp_setContext
void cpp_setContext(int id);
RcppExport SEXP _gpuRbarebones_cpp_setContext(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    cpp_setContext(id);
    return R_NilValue;
END_RCPP
}
// getContextPtr
SEXP getContextPtr(const int ctx_id);
RcppExport SEXP _gpuRbarebones_getContextPtr(SEXP ctx_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type ctx_id(ctx_idSEXP);
    rcpp_result_gen = Rcpp::wrap(getContextPtr(ctx_id));
    return rcpp_result_gen;
END_RCPP
}
// cpp_deviceType
SEXP cpp_deviceType(SEXP gpu_idx_, int ctx_idx);
RcppExport SEXP _gpuRbarebones_cpp_deviceType(SEXP gpu_idx_SEXP, SEXP ctx_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    Rcpp::traits::input_parameter< int >::type ctx_idx(ctx_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_deviceType(gpu_idx_, ctx_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_detectGPUs
SEXP cpp_detectGPUs(SEXP platform_idx);
RcppExport SEXP _gpuRbarebones_cpp_detectGPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_detectGPUs(platform_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gpuInfo
List cpp_gpuInfo(SEXP gpu_idx_, int ctx_idx);
RcppExport SEXP _gpuRbarebones_cpp_gpuInfo(SEXP gpu_idx_SEXP, SEXP ctx_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    Rcpp::traits::input_parameter< int >::type ctx_idx(ctx_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gpuInfo(gpu_idx_, ctx_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cpuInfo
List cpp_cpuInfo(SEXP cpu_idx_, int ctx_idx);
RcppExport SEXP _gpuRbarebones_cpp_cpuInfo(SEXP cpu_idx_SEXP, SEXP ctx_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cpu_idx_(cpu_idx_SEXP);
    Rcpp::traits::input_parameter< int >::type ctx_idx(ctx_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cpuInfo(cpu_idx_, ctx_idx));
    return rcpp_result_gen;
END_RCPP
}
// currentDevice
SEXP currentDevice();
RcppExport SEXP _gpuRbarebones_currentDevice() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(currentDevice());
    return rcpp_result_gen;
END_RCPP
}
// cpp_detectCPUs
SEXP cpp_detectCPUs(SEXP platform_idx);
RcppExport SEXP _gpuRbarebones_cpp_detectCPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_detectCPUs(platform_idx));
    return rcpp_result_gen;
END_RCPP
}
// preferred_wg_size
int preferred_wg_size(SEXP sourceCode_, std::string kernel_name, const int ctx_id);
RcppExport SEXP _gpuRbarebones_preferred_wg_size(SEXP sourceCode_SEXP, SEXP kernel_nameSEXP, SEXP ctx_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< const int >::type ctx_id(ctx_idSEXP);
    rcpp_result_gen = Rcpp::wrap(preferred_wg_size(sourceCode_, kernel_name, ctx_id));
    return rcpp_result_gen;
END_RCPP
}
// detectPlatforms2
SEXP detectPlatforms2();
RcppExport SEXP _gpuRbarebones_detectPlatforms2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(detectPlatforms2());
    return rcpp_result_gen;
END_RCPP
}
// detectPlatforms
SEXP detectPlatforms();
RcppExport SEXP _gpuRbarebones_detectPlatforms() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(detectPlatforms());
    return rcpp_result_gen;
END_RCPP
}
// currentPlatform
SEXP currentPlatform();
RcppExport SEXP _gpuRbarebones_currentPlatform() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(currentPlatform());
    return rcpp_result_gen;
END_RCPP
}
// cpp_platformInfo
List cpp_platformInfo(SEXP platform_idx_);
RcppExport SEXP _gpuRbarebones_cpp_platformInfo(SEXP platform_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_platformInfo(platform_idx_));
    return rcpp_result_gen;
END_RCPP
}
// platformsAvailable
List platformsAvailable();
RcppExport SEXP _gpuRbarebones_platformsAvailable() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(platformsAvailable());
    return rcpp_result_gen;
END_RCPP
}
// synchronize
void synchronize();
RcppExport SEXP _gpuRbarebones_synchronize() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    synchronize();
    return R_NilValue;
END_RCPP
}
// cpp_vcl_nrow
SEXP cpp_vcl_nrow(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRbarebones_cpp_vcl_nrow(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vcl_nrow(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vcl_ncol
SEXP cpp_vcl_ncol(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRbarebones_cpp_vcl_ncol(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vcl_ncol(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vclVector_size
SEXP cpp_vclVector_size(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRbarebones_cpp_vclVector_size(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vclVector_size(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpuRbarebones_initContexts", (DL_FUNC) &_gpuRbarebones_initContexts, 0},
    {"_gpuRbarebones_listContexts", (DL_FUNC) &_gpuRbarebones_listContexts, 0},
    {"_gpuRbarebones_currentContext", (DL_FUNC) &_gpuRbarebones_currentContext, 0},
    {"_gpuRbarebones_cpp_setContext", (DL_FUNC) &_gpuRbarebones_cpp_setContext, 1},
    {"_gpuRbarebones_getContextPtr", (DL_FUNC) &_gpuRbarebones_getContextPtr, 1},
    {"_gpuRbarebones_cpp_deviceType", (DL_FUNC) &_gpuRbarebones_cpp_deviceType, 2},
    {"_gpuRbarebones_cpp_detectGPUs", (DL_FUNC) &_gpuRbarebones_cpp_detectGPUs, 1},
    {"_gpuRbarebones_cpp_gpuInfo", (DL_FUNC) &_gpuRbarebones_cpp_gpuInfo, 2},
    {"_gpuRbarebones_cpp_cpuInfo", (DL_FUNC) &_gpuRbarebones_cpp_cpuInfo, 2},
    {"_gpuRbarebones_currentDevice", (DL_FUNC) &_gpuRbarebones_currentDevice, 0},
    {"_gpuRbarebones_cpp_detectCPUs", (DL_FUNC) &_gpuRbarebones_cpp_detectCPUs, 1},
    {"_gpuRbarebones_preferred_wg_size", (DL_FUNC) &_gpuRbarebones_preferred_wg_size, 3},
    {"_gpuRbarebones_detectPlatforms2", (DL_FUNC) &_gpuRbarebones_detectPlatforms2, 0},
    {"_gpuRbarebones_detectPlatforms", (DL_FUNC) &_gpuRbarebones_detectPlatforms, 0},
    {"_gpuRbarebones_currentPlatform", (DL_FUNC) &_gpuRbarebones_currentPlatform, 0},
    {"_gpuRbarebones_cpp_platformInfo", (DL_FUNC) &_gpuRbarebones_cpp_platformInfo, 1},
    {"_gpuRbarebones_platformsAvailable", (DL_FUNC) &_gpuRbarebones_platformsAvailable, 0},
    {"_gpuRbarebones_synchronize", (DL_FUNC) &_gpuRbarebones_synchronize, 0},
    {"_gpuRbarebones_cpp_vcl_nrow", (DL_FUNC) &_gpuRbarebones_cpp_vcl_nrow, 2},
    {"_gpuRbarebones_cpp_vcl_ncol", (DL_FUNC) &_gpuRbarebones_cpp_vcl_ncol, 2},
    {"_gpuRbarebones_cpp_vclVector_size", (DL_FUNC) &_gpuRbarebones_cpp_vclVector_size, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpuRbarebones(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
